name: Build and Publish

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main  # Ensure we are checking out the main branch
      - uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install GitHub CLI
        run: sudo apt-get install gh

      - name: Yarn install
        run: yarn install --frozen-lockfile

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update version in package.json
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Updating package.json version to $VERSION"
          jq --arg new_version "$VERSION" '.version = $new_version' package.json > package.tmp.json && mv package.tmp.json package.json
          cat package.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Yarn build
        run: yarn build

      - name: Create new branch, commit and push changes
        run: |
          NEW_BRANCH="release-${GITHUB_REF#refs/tags/}"
          echo "Creating new branch $NEW_BRANCH"
          git checkout -b $NEW_BRANCH
          git add .
          git commit -m "chore(release): update version to ${GITHUB_REF#refs/tags/v}"
          git push origin $NEW_BRANCH
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug branch creation
        run: |
          git branch -a
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up NPM auth
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Publish to npm
        run: yarn publish --non-interactive
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Pull Request
        id: create_pull_request
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(release): update version to ${GITHUB_REF#refs/tags/v}"
          branch: $NEW_BRANCH
          base: main
          title: "Release ${GITHUB_REF#refs/tags/v}"
          body: "This PR updates the version to ${GITHUB_REF#refs/tags/v}"

      - name: Verify Pull Request creation
        run: |
          echo "Verifying pull request creation..."
          gh pr list --state open --head "$NEW_BRANCH"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for PR to be created
        run: |
          echo "Waiting for pull request to be created..."
          for i in {1..30}; do
            PR_NUMBER=$(gh pr list --state open --head "$NEW_BRANCH" --json "number" --jq '.[0].number')
            if [ -n "$PR_NUMBER" ]; then
              echo "Pull request found: $PR_NUMBER"
              break
            fi
            echo "Pull request not found, retrying in 10 seconds..."
            sleep 10
          done
          if [ -z "$PR_NUMBER" ]; then
            echo "No pull request found for branch $NEW_BRANCH after multiple attempts"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge Pull Request
        run: |
          echo "Merging PR #${PR_NUMBER}"
          gh pr merge "$PR_NUMBER" --squash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete temporary branch
        if: success()
        run: |
          git push origin --delete release-${GITHUB_REF#refs/tags/}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
